rushBroadFile2 <- rerun[fullSample$Source == "RUSH-BROAD", "DriveA_FileName2"]
rushBroadFile3 <- rerun[fullSample$Source == "RUSH-BROAD", "DriveB_FileName1"]
rushBroadFile4 <- rerun[fullSample$Source == "RUSH-BROAD", "DriveB_FileName2"]
rushBroadFiles <- c(rushBroadFile1[rushBroadFile1 != "NULL"],
rushBroadFile2[rushBroadFile2 != "NULL"],
rushBroadFile3[rushBroadFile3 != "NULL"],
rushBroadFile4[rushBroadFile4 != "NULL"])
rushBroadFiles
fullSample[fullSample$Source == "RUSH-BROAD", "RNASubjectId"]
sampleSwapIds <- c("10249336", "50100518", "50104008", "20177982", "36492755",
"05689621", "11444465", "10315029", "20270920", "11615242")
sampleSwapIds
q()
q()
gene1 <- NA;
is.null(gene1)
?is.null
q()
library(dplyr) # for subsetting data
library(R.utils) # for unzipping data
library(synapseClient) # to download data
library(edgeR) # for DE analysis
library(biomaRt) # for gene name lookups
library(ggplot2) # for better boxplots
library(reshape2) # for melt for ggplot
library(PerformanceAnalytics) # for kertosis calculations
## Get data and define groups
#Login to Synapse using credentials saved in .synapseConfig file
synapseLogin()
# get the transposed readcount file and covariates file from synapse
countFile <- synGet('syn3192634')
covariatesFile <- synGet('syn2875343') # the working dir copy
# unzip count file and load for processing
localCountFilePath <- getFileLocation(countFile)
if(!file.exists(sub('.gz', '', localCountFilePath))) {
gunzip(localCountFilePath)
}
localCountFilePath <- sub('.gz', '', localCountFilePath) #trim the .gz suffix
counts <- read.table(localCountFilePath, header = TRUE, stringsAsFactors = FALSE)
#PROBLEM: - an rTGMinus sample
#in count data, sample “LP62_4”
#in covariates, sample “LP_62_4”
# for now, change column name in counts - TODO: fix covariates file
colnames(counts)[1] <- "LP_62_4"
# load covariates file to have handy
covariates <- read.table(getFileLocation(covariatesFile), header = TRUE, stringsAsFactors = FALSE)
## define groups: JNPL3+ (transgenic), JNPL3- (WT), (ignore rTG+ rTG- for now)
# (there MUST be a cleaner way to do this)
# JNPL3+:
JNPL3Plus <- dplyr::select(filter(covariates, Experiment == "MAPT_P301L" & Genotype == "+"), Mouse_ID)
# 15 samples
# JNPL3-:
JNPL3Minus <- dplyr::select(filter(covariates, Experiment == "MAPT_P301L" & Genotype == "-"), Mouse_ID)
# 9 samples
JNPL3Plus <- as.character(JNPL3Plus$Mouse_ID)
JNPL3Minus <- as.character(JNPL3Minus$Mouse_ID)
JNPL3PlusCols <- is.element(as.character(colnames(counts)), JNPL3Plus)
JNPL3MinusCols <- is.element(as.character(colnames(counts)), JNPL3Minus)
groups <- c(rep(0, length(counts[1,])))
groups[JNPL3PlusCols] <- "JNPL3Plus"
groups[JNPL3MinusCols] <- "JNPL3Minus"
JNPL3Samples <- c(JNPL3Plus, JNPL3Minus)
JNPL3Cols <- is.element(as.character(colnames(counts)), JNPL3Samples)
## Make DGEList object to start working on DE analysis
JNPL3 <- DGEList(counts = dplyr::select(counts, one_of(JNPL3Samples)),
group = groups[JNPL3Cols])
## filter data
# require minimum of 100 counts per million for at least 2 samples
d.full <- JNPL3 # keep the old one in case we mess up
dim(d.full)
#39179    24
keep <- rowSums(cpm(JNPL3)>100) >= 2
d <- JNPL3[keep,]
dim(d)
#3133   24 #seth says this is too stringent - 70% of genes in genome are expressed in brain - ~20k features normal
# reset library sizes after filtering
d$samples$lib.size <- colSums(d$counts)
# normalize the data using TMM
d <- calcNormFactors(d, method = "TMM")
plotMDS(d, method="bcv", col=as.numeric(d$samples$group))
legend("bottomleft", as.character(unique(d$samples$group)), col=1:3, pch=20)
d1 <- estimateCommonDisp(d, verbose=T) #assume all same for this pass, GLM later
# Disp = 0.09527 , BCV = 0.3087
d1 <- estimateTagwiseDisp(d1)
plotBCV(d1) #plots the tagwise biological coefficient of variation (square root of dispersions) against log2-CPM.
# observation - looks like a discontinuity in the dispersions around logCPM ~ 7
# Look at DE with exact test
de.tgw <- exactTest(d1)
summary(decideTestsDGE(de.tgw, p.value=0.01))
topTen <- rownames(topTags(de.tgw, n = 10))
toPlot <- d[topTen] #10 rows, 24 columns
top <- topTags(de.tgw, n=50)
# get gene names for x axis labels -- ORDER ISN'T PRESERVED FROM BIOMART QURY!
ensembl=useMart("ensembl", dataset="mmusculus_gene_ensembl")
geneNames <- getBM(c("ensembl_gene_id", "external_gene_name"),
filters = "ensembl_gene_id",
values = rownames(top)[1:10],
ensembl)
geneNames <- getBM(c("ensembl_gene_id", "external_gene_name"),
filters = "ensembl_gene_id",
values = rownames(top)[1:100],
ensembl)
geneNames
top <- topTags(de.tgw, n=100)
geneNames <- getBM(c("ensembl_gene_id", "external_gene_name"),
filters = "ensembl_gene_id",
values = rownames(top)[1:100], ensembl)
top
ensemblToGeneId <- function(x,ensembl){
gene1 <- NA;
try(gene1 <- getBM(attributes='external_gene_name',filters='ensembl_gene_id',values=x,mart=ensembl),silent=T)
if(is.null(gene1)){
gene1<-NA
}
return(gene1)
}
ensemblToGeneId(rownames(top), ensembl)
geneNames[1,]
labels <- geneNames$external_gene_name[(order(match(geneNames$ensembl_gene_id, rownames(top)[1:10])))]
labels(1)
labels[1]
values
rownames(top)[1:100]
geneIds <- rep(NA,100)
geneIds <- values
geneIds <- rownames(top)[1:100]
geneIds
write(geneIds, "testIds.txt")
pwd
system(ls)
system('ls')
geneIds <- read.table("testIds.txt")
View(geneIds)
View(geneIds)
require(biomaRt)
geneIds <- read.table("testIds.txt")
ensembl=useMart("ensembl", dataset="mmusculus_gene_ensembl")
ensemblToGeneId <- function(x,ensembl){
gene1 <- NA;
try(gene1 <- getBM(attributes='external_gene_name',filters='ensembl_gene_id',values=x,mart=ensembl),silent=T)
if(is.null(gene1)){
gene1<-NA
}
return(gene1)
}
testNames <- ensemblToGeneId(geneIds, ensembl)
geneNames <- getBM(c("ensembl_gene_id", "external_gene_name"),
filters = "ensembl_gene_id",
values = geneIds, ensembl)
geneNames[1]
geneNames$external_gene_name[1]
geneIds[1]
geneIds$V1[1]
as.character(geneIds$V1[1])
geneNames$ensembl_gene_id[1]
geneNames
geneNames$external_gene_name[1]
testNames[1]
testNames$external_gene_name[1]
geneNames[(order(match(geneNames$ensembl_gene_id, geneIds)))]
geneNames[(order(match(geneNames$ensembl_gene_id, geneIds))),]
geneNames <- geneNames[(order(match(geneNames$ensembl_gene_id, geneIds)))]
geneNames[order(match(geneNames$ensembl_gene_id, geneIds)),]
geneNames <- geneNames[order(match(geneNames$ensembl_gene_id, geneIds)),]
unique(geneIds)
setdif(geneIds, geneNames$ensembl_gene_id)
geneIds &in& geneNames$ensembl_gene_id
geneIds %in% geneNames$ensembl_gene_id
geneIds %in% geneNames$ensembl_gene_id[,]
geneIds %in% geneNames$ensembl_gene_id
setdiff(geneIds, geneNames$ensembl_gene_id)
setdiff(geneIds, as.list(geneNames$ensembl_gene_id))
geneNames$ensembl_gene_id
?setdiff
?setdiff
as.vector(geneNames$ensembl_gene_id)
setdiff(geneIds, as.vector(geneNames$ensembl_gene_id))
setdiff(as.vector(geneIds), as.vector(geneNames$ensembl_gene_id))
class(geneIds)
class(geneName)
geneIds
setdiff(as.vector(geneIds$V1), as.vector(geneNames$ensembl_gene_id))
geneIds
geneIds == "ENSMUSG00000019769"
geneNames[1]
geneNames$V1[1]
geneNames$ensembl_gene_id[1]
geneIds[1]
geneIds$V1[1]
geneNames$ensembl_gene_id[1]
require(biomaRt)
geneIds <- read.table("testIds.txt")
ensembl=useMart("ensembl", dataset="mmusculus_gene_ensembl")
ensemblToGeneId <- function(x,ensembl){
gene1 <- NA;
try(gene1 <- getBM(attributes='external_gene_name',filters='ensembl_gene_id',values=x,mart=ensembl),silent=T)
if(is.null(gene1)){
gene1<-NA
}
return(gene1)
}
# use function to get gene name by ensembl_gene_id
testNames <- ensemblToGeneId(geneIds, ensembl)
# or grab them directly without the function
geneNames <- getBM(c("ensembl_gene_id", "external_gene_name"),
filters = "ensembl_gene_id",
values = geneIds, ensembl)
geneIds[1]
geneIds$V1[1]
geneNames$ensembl_gene_id[1]
testNames[1]
testNames$external_gene_name[1]
as.character(geneIds$V1[1]) # ENSMUSG00000061808
geneIds$V1[1]
geneNames$ensembl_gene_id[1] # ENSMUSG00000001025
geneNames$external_gene_name[1] # "S100a6"
testNames$external_gene_name[1] # "S100a6" -- NOT WHAT I'D EXPECT WHEN CALLING FUNCTION
geneNames[order(match(geneNames$ensembl_gene_id, geneIds)),]
match(geneNames$ensembl_gene_id, geneIds)
order(match(geneNames$ensembl_gene_id, geneIds)
)
match(geneNames$ensembl_gene_id, geneIds)
?match
match(as.vector(geneNames$ensembl_gene_id), geneIds)
match(as.vector(geneNames$ensembl_gene_id), as.vector(geneIds))
as.vector(geneIds)
geneNames$ensembl_gene_id
match(geneNames$ensembl_gene_id, geneIds)
match(geneIds, geneNames$ensembl_gene_id)
q()
library(synapseClient)
library(R.utils)
library(edgeR)
#Login to Synapse using credentials saved in .synapseConfig file
synapseLogin()
codeFile <- ("https://github.com/PriceLab/AMP-ad/tree/0.2/MBB/TCX/normalize_readcounts.R")
# The files to normalize are:
# AMP-AD_MSBB_UFL-Mayo-ISB_IlluminaHiSeq2000_TCX_GeneCounts.txt.gz ('syn3667936')
# AMP-AD_MSBB_UFL-Mayo-ISB_IlluminaHiSeq2000_TCX_TranscriptCounts.txt.gz ('syn3667937')
countFileSynapseIDs <- c('syn3667936', 'syn3667937')
for (mergedCountFile in countFileSynapseIDs) {
message("Normalizing ", mergedCountFile)
# Download file from Synapse
originalCountFile <- synGet(mergedCountFile)
# unzip file and load for processing
localFilePath <- getFileLocation(originalCountFile)
if(!file.exists(substr(localFilePath, 1, nchar(localFilePath) - 3))) {
gunzip(localFilePath)
}
localFilePath <- sub('.gz', '', localFilePath) #trim the .gz suffix
transposedCounts <- read.table(localFilePath, header = TRUE, check.names = FALSE)
# make DGEList object
expr <- DGEList(transposedCounts, group = rep(1, ncol(transposedCounts)))
# calculate normalization factors
normFactors <- calcNormFactors(expr, method = ("TMM"))
# If you get "error: Error in quantile.default(x, p = p) :
# missing values and NaN's not allowed if 'na.rm' is FALSE"
# expr$samples$lib.size shows a library size of 0 for problematic samples
# use normaliztion factors to calculate cpm -
# per https://www.biostars.org/p/84087/, that's calculated as
# count / (library size * normalization factor))
normalizedCpm <- cpm(normFactors)
# write the data to local dir
# need to fix this naming
newFileName <- sub('_id_counts.txt.gz', '', originalCountFile$properties$name)
newFileName <- paste0(newFileName, "Counts_normalized.txt", sep="")
write.table(format(normalizedCpm, scientific = FALSE, digits = 5),
newFileName, quote = FALSE, sep = "\t", row.names = TRUE)
# package it up, then create a Synapse object for the output file and upload with provenance
gzip(newFileName)
newFileName <- paste0(newFileName, ".gz", sep="")
parentId <- originalCountFile$properties$parentId
normalizedCountFile <- File(newFileName, parentId = parentId)
normalizedCountFile <- synStore(normalizedCountFile,
activityName="CPM (using TMM) from edgeR normalization",
used=list(list(name = "normalize_readcounts.R",
url = codeFile, wasExecuted = T),
list(entity=originalCountFile,
wasExecuted=F)))
}
q()
q()
lengths = c(100,200,300,100,100)
mat = cbind(c(1,1,0,1,0),c(1,1,1,1,1),c(0,1,1,0,1))
transcriptLengths  <- lengths %*% mat
w = 1000
counts = c(125,350,300,125,100)
theta.hat = c(1, 2, 3) / 10000
mat %*% theta.hat * lengths * w
LHS = counts/(lengths * w)
lm.fit(mat, LHS)$coefficients
counts = c(60,320,420,60,140)
LHS = counts/(lengths * w)
lm.fit(mat, LHS)$coefficients
q()
update.packages(checkBuilt=TRUE)
source("http://bioconductor.org/biocLite.R")
biocLite()
biocVersion()
biocValid()
library(synapseClient) # for synapse data exchange
source("http://depot.sagebase.org/CRAN.R")
pkgInstall("synapseClient")
q()
library(synapseClient) # for synapse data exchange
biocVersion()
source("http://bioconductor.org/biocLite.R")
biocLite()
biocVersion()
biocValid()
q()
library('airway')
library(airway)
library(BiocInstaller)
biocLite("airway")
library(airway)
library(pasillaBamSubset)
biocLite("pasillaBamSubset")
library(pasillaBamSubset)
bam.file <- untreated3_chr4()
library(Rsamtools)
bf <- BamFile(bam.file)
biocLite(Rsamtools)
cranpkgs <- c("ggplot2","pheatmap")
install.packages(cranpkgs)
# rafalib from github (not strictly necessary, but useful for plots)
install.packages("devtools")
library(devtools)
install_github("ririzarr/rafalib")
# the rest are Bioconductor packages
biocpkgs <- c("Rsamtools",
"GenomicFeatures",
"GenomicAlignments",
"Rsubread",
"airway",
"pasilla",
"DESeq2",
"DEXSeq",
"vsn",
"sva",
"org.Hs.eg.db",
"cummeRbund",
"pasillaBamSubset",
"TxDb.Dmelanogaster.UCSC.dm3.ensGene")
source("http://bioconductor.org/biocLite.R")
biocLite(biocpkgs)
library(Rsamtools)
bf <- BamFile(bam.file)
library(TxDb.Dmelanogaster.UCSC.dm3.ensGene)
txdb <- TxDb.Dmelanogaster.UCSC.dm3.ensGene
exons.by.gene <- exonsBy(txdb, by="gene")
head(exons.by.gene)
str(exons.by.gene)
exons.by.gene(1)
exons.by.gene[1]
chr4.idx <- all(seqnames(exons.by.gene) == "chr4")
ebg.sub <- ebg[chr4.idx]
ebg.sub <- exons.by.gene[chr4.idx]
se <- summarizeOverlaps(ebg.sub, bam.list,
mode="Union",
singleEnd=FALSE,
ignore.strand=TRUE,
fragments=FALSE)
library(GenomicAlignments)
se <- summarizeOverlaps(ebg.sub, bam.list,
+                         mode="Union",
+                         singleEnd=FALSE,
+                         ignore.strand=TRUE,
+                         fragments=FALSE)
se <- summarizeOverlaps(ebg.sub, bam.list,
mode="Union",
singleEnd=FALSE,
ignore.strand=TRUE)
se <- summarizeOverlaps(ebg.sub, bf,
mode="Union",
singleEnd=FALSE,
ignore.strand=TRUE)
se[1]
colData(se) <- DataFrame(sample.table)
names(se)
se[1]
se[1].assays
se.assays[1]
se
se[1,]
se
se[1,1]
se[1,1,]
se[1,1]
se$counts[1]
se$counts
head(assay(se), 1)
head(assay(se))
q()
q()
setwd("~/Projects/bdds_center/working/R")
install.packages("jsonlite", repos="http://cran.r-project.org")
#load
library(jsonlite)
?fromJSON
JSONFilePath <- "/Users/bheavner/Projects/bdds_center/data/ppmi.json"
PPMIdata <- fromJSON(JSONFilePath)
?stream_in
PPMIdata <- dfromJSON(sprintf("[%s]", paste(readLines(JSONFilePath), collapse=",")))
PPMIdata <- fromJSON(sprintf("[%s]", paste(readLines(JSONFilePath), collapse=",")))
ls()
install.packages("rjson", repos="http://cran.r-project.org")
#load library
library(rjson)
JSONFilePath <- "/Users/bheavner/Projects/bdds_center/data/ppmi.json"
PPMIdata <- fromJSON(JSONFilePath)
?fromJSON
PPMIdata <- fromJSON(file = JSONFilePath)
str(PPMIdata)
length(data)
names(data)
length(PPMIdata)
names(PPMIdata)
str(PPMIdata$PATNO)
length(PPMIdata$PATNO)
PPMIdata$PATNO[1]
PPMIdata$PATNO[2]
PPMIdata$PATNO[3]
PPMIdata[1]$PATNO
PPMIdata[2]$PATNO
PPMIdata[3]$PATNO
PPMIdata$PATNO
PPMIdata[[1]]$PATNO
PPMIdata[[]]$PATNO
PATNO[[]]
PPMIdataPATNO[[]]
head(PPMIdata)
PPMIdata$PATNO
PPMIdata$PATNO[2]
str(data)
?capture.output
PATNO[[]]
PPMIdata.PATNO[[]]
PPMIdata[[1]]$PATNO
PPMIdata[[1]]
PPMIdata[[2]]
PPMIdata[[3]]
colnames(PPMIdata)
rownames(PPMIdata)
head(PPMIdata)
head(PPMIdata[[1]])
head(PPMIdata[[1]], n=3)
install.packages("RJsonio", repos="http://cran.r-project.org")
library(RJsonio)
install.packages("RJSONIO", repos="http://cran.r-project.org")
JSONFilePath <- "/Users/bheavner/Projects/bdds_center/data/ppmi.json"
PPMIdata <- fromJSON(file = JSONFilePath) #PPMIdata is now a large list
?fromJSON
??fromJSON
library(RJSONIO)
PPMIdata <- fromJSON(file = JSONFilePath) #PPMIdata is now a large list
PPMIdata <- fromJSON(JSONFilePath) #PPMIdata is now a large list
length(PPMIdata)
names(PPMIdata)
PPMIdata[1]
PPMIdata[1]$PATNO
PPMIdata[2]$PATNO
PPMIdata[1]$PATNO[2]
PPMIdata[1]$PATNO
PPMIdata$PATNO
class(PPMIdata$PATNO)
str(PPMIdata$PATNO)
class(PPMIdata[[]]$PATNO)
PPMIdata[[]]]$PATNO
PPMIdata[[]]$PATNO
library(rjson)
JSONFilePath <- "/Users/bheavner/Projects/bdds_center/data/ppmi.json"
PPMIdata <- fromJSON(file = JSONFilePath) #PPMIdata is now a large list
names(PPMIdata)
PPMIdata$PATNO
library(RJSONIO)
JSONFilePath <- "/Users/bheavner/Projects/bdds_center/data/ppmi.json"
PPMIdata <- fromJSON(JSONFilePath) #PPMIdata is now a large list
PPMIdata$PATNO
PPMIdata[['PATNO']]
PPMIdata[[1]]
PPMIdata[[2]]
PPMIdata[[3]]
sapply(PPMIdata, function(x) x[[1]])
sapply(PPMIdata, function(x) x[[2]])
sapply(PPMIdata, function(x) x[[3]])
SONFilePath <- "/Users/bheavner/Projects/bdds_center/data/ppmiUnix.json"
JSONFilePath <- "/Users/bheavner/Projects/bdds_center/data/ppmiUnix.json"
library(jsonlite)
PPMIdata <- fromJSON(JSONFilePath)
PPMIdata <- fromJSON(JSONFilePath) #PPMIdata is now a large list
library(RJSONIO)
PPMIdata <- fromJSON(JSONFilePath) #PPMIdata is now a large list
library(RJSONIO)
JSONFilePath <- "/Users/bheavner/Projects/bdds_center/data/ppmiUnix.json"
PPMIdata <- fromJSON(JSONFilePath) #PPMIdata is now a large list
library(RJSONIO)
PPMIdata <- fromJSON(JSONFilePath) #PPMIdata is now a large list
PPMIdata$PATNO
PPMIdata$PATNO[]
PPMIdata[]$PATNO
PPMIdata[[]]$PATNO
PPMIdata[[]]
PPMIdata[[1]]
PPMIdata[[2]]
PPMIdata[[1,1]]
PPMIdata[[1,2]]
PPMIdata[[1]]
PPMIdata[[1]][1]
PPMIdata[[1]][2]
PPMIdata[[1]][3]
q()
